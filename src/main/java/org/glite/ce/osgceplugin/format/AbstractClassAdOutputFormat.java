/*
 * Copyright (c) Members of the EGEE Collaboration. 2004. 
 * See http://www.eu-egee.org/partners/ for details on the copyright
 * holders.  
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at 
 *
 *     http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */
 
/*
 *
 * Authors: Luigi Zangrando <zangrando@pd.infn.it>
 *
 */

package org.glite.ce.osgceplugin.format;

import java.util.ArrayList;
import java.util.Hashtable;

import org.glite.ce.monitorapij.sensor.SensorOutputDataFormat;
import org.glite.ce.osgceplugin.format.util.CEGlueSchema;

public abstract class AbstractClassAdOutputFormat extends SensorOutputDataFormat {
   private ArrayList notSupportedattributes;
   private ArrayList multipleValuesAttributes;



   public AbstractClassAdOutputFormat(String formatName, ArrayList multipleValuesAttributeList, ArrayList notSupportedattributeList) {
      super(formatName);

      initMultipleAttributeList(multipleValuesAttributeList);
      initNotSupportedAttributeList(notSupportedattributeList);
      initSupportedQueryLang();
   }

   private void initMultipleAttributeList(ArrayList multipleAttributesList) {
      // Initializes the list of supported attributes which may have multiple values
      multipleValuesAttributes = (multipleAttributesList == null) ? new ArrayList() : multipleAttributesList;
   }

   private void initNotSupportedAttributeList(ArrayList notSupportedattributesList) {
      // Initializes the list of not supported attributes
      notSupportedattributes = (notSupportedattributesList == null) ? new ArrayList() : notSupportedattributesList;
   }

   private void initSupportedQueryLang() {
      String[] supportedQueryLang = new String[] {
            "RegEx", "ClassAd"
      };

      // Sets the supported query languages
      setSupportedQueryLang(supportedQueryLang);
   }

   protected ArrayList getMultipleAttributes() {
      return multipleValuesAttributes;
   }

   protected void setMultipleAttributes(ArrayList multiAttributes) {
      multipleValuesAttributes = multiAttributes;
   }

   protected ArrayList getNotSupportedattributes() {
      return notSupportedattributes;
   }

   protected void setNotSupportedattributes(ArrayList notSupportedattributes) {
      this.notSupportedattributes = notSupportedattributes;
   }



   /**
    * It is called by the CEMon to format the information generated by 
    * the sensor with the appropriated output format selected by the client.
    */
   public String[] apply(Hashtable parameters) throws Exception {
      if(parameters == null) {
         throw (new Exception(getName() + " apply format error: parameter is null"));
      }

      String glueSchema = (String) parameters.get("glueSchema");

      if(glueSchema != null) {
         String[] ceinfo = CEGlueSchema.makeCEGlueSchemaInfo(glueSchema);
         
         for (int i = 0; i < ceinfo.length; i++) {
            String classad = ldifToClassad(ceinfo[i], multipleValuesAttributes, notSupportedattributes);

            if(classad != null) {
               ceinfo[i] = classad;
            }
         }

         return ceinfo;
      } else {
         throw (new Exception(getName() + " apply format error: glueSchema is null"));
      }
   }


   abstract String ldifToClassad(String ldif, ArrayList multipleAttributesList, ArrayList notSupportedattributesList);
   
   
   protected boolean checkAttribute(String attributeName, ArrayList attributes) {
      if(attributes == null) {
         return false;
      }

      return attributes.contains(attributeName.toLowerCase());
   }



   protected String parseAttributeValue(String value, boolean attrQuoted ) {
      if(value == null) {
         return "undefined";
      }

      String value_lc = value;

      while(value_lc.startsWith(" ")) {
         value_lc = value_lc.substring(1, value_lc.length());
      }

      try {
         Double.parseDouble(value_lc);
         return value_lc;
      } catch (NumberFormatException ex) {}

      if(value_lc.equalsIgnoreCase("true") || value_lc.equalsIgnoreCase("false") || value_lc.equalsIgnoreCase("undefined")) {
         return value_lc.toLowerCase();
      } else {
         value_lc = attrQuoted? "\"" + value_lc + "\"": value_lc;
         return value_lc;
      }
   }

}
